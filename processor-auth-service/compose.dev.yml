# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
name: microtube
services:
  processor-service:
    build:
      context: .
#      dockerfile:
      target: development
      args:
        GLOWROOT_COLLECTOR_ADDRESS: http://glowroot:8181
    container_name: microservice-processor-service
    command:
      - --eureka.instance.non-secure-port=${PUBLISHED_PORT:-8080}
    volumes:
      - ./logs:/opt/app/logs
      - ./tmp/:/opt/app/tmp
    networks:
      - microtube-network
#      - monitoring-network
    ports:
      - ${PUBLISHED_PORT:-8080}:8080
#      - name: actuator
#        host_ip: 127.0.0.1
#        target: 8081
#        published: ${ACTUATOR_PORT:-8081}
#        app_protocol: http
      - name: debug-port
        host_ip: 127.0.0.1
        target: 8000
        published: ${DEBUG_PORT:-8000}
        app_protocol: ws
#    depends_on:
#      mysql.db:
#        condition: service_healthy
#    healthcheck:
#      test: sh -c "curl -f http://localhost:8080${SERVER_CONTEXT_PATH-}/healthcheck"
#      interval: 20s
#      timeout: 10s
#      retries: 10
    develop:
      watch:
        - action: rebuild
          path: .
    environment:
      # Application configs
      SPRING_ACTIVES_PROFILE: dev
      SERVER_CONTEXT_PATH: ${SERVER_CONTEXT_PATH-}
      ACTUATOR_HOST: 0.0.0.0
      ACTUATOR_PORT: 8081
      JWT_SECRET: ${JWT_SECRET-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=}
      # Storage configs
      MAIN_DB_URL: ${MAIN_DB_URL:-jdbc:mysql://mysql.db:3306/MICROTUBE}
      MAIN_DB_USERNAME: ${MAIN_DB_USERNAME:-dbuser}
      MAIN_DB_PASSWORD: ${MAIN_DB_PASSWORD:-abc123}
      OBJECT_STORE_URL: ${OBJECT_STORE_URL:-http://minio:9000}
      OBJECT_STORE_USERNAME: ${OBJECT_STORE_USERNAME:-admin}
      OBJECT_STORE_PASSWORD: ${OBJECT_STORE_PASSWORD:-minioadmin}
      OBJECT_STORE_BUCKET_TEMP: ${OBJECT_STORE_BUCKET_TEMP:-temporary}
      OBJECT_STORE_BUCKET_HLS: ${OBJECT_STORE_BUCKET_HLS:-hls}
      OBJECT_STORE_BUCKET_AVATAR: ${OBJECT_STORE_BUCKET_AVATAR:-avatar}
      OBJECT_STORE_BUCKET_THUMBNAIL: ${OBJECT_STORE_BUCKET_THUMBNAIL:-thumbnail}
      # Monitoring
#      LOGGING_CONFIG_FILEPATH=/app/config/logback-spring.xml
      FLUENTD_HOST: ${FLUENTD_HOST:-fluentd}
      FLUENTD_PORT: ${FLUENTD_PORT:-24224}
      ENABLE_ZIPKIN: false
      ZIPKIN_ENDPOINT: ${ZIPKIN_ENDPOINT:-http://zipkin:9411/api/v2/spans}
      # Integration
      SERVICE_REGISTRAR_URL: ${SERVICE_REGISTRAR_URL:-http://service-registrar:8761/eureka}
      EUREKA_INSTANCE_HOSTNAME: ${EUREKA_INSTANCE_HOSTNAME:-processor-service}
#    logging:
#      driver: fluentd
#      options:
#        fluentd-address: ${FLUENTD_ADDRESS:-localhost:24224}
#        tag: "{{.ImageName}}"
#        fluentd-async:
##        fluentd-async-reconnect-interval: 2s
#        fluentd-buffer-limit: 524288
##        fluentd-retry-wait: 1
##        fluentd-max-retries: 4294967295
#        fluentd-sub-second-precision:

#volumes:
#  server-log:
#    driver: local

networks:
  # Communicate with storage services
  microtube-network:
    name: microtube-network
#  monitoring-network:
#    name: monitoring-network
